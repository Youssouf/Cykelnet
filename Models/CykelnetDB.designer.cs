#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cykelnet.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cykelnet")]
	public partial class CykelnetDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFriendRequest(FriendRequest instance);
    partial void UpdateFriendRequest(FriendRequest instance);
    partial void DeleteFriendRequest(FriendRequest instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertFavorite(Favorite instance);
    partial void UpdateFavorite(Favorite instance);
    partial void DeleteFavorite(Favorite instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertRoutetag(Routetag instance);
    partial void UpdateRoutetag(Routetag instance);
    partial void DeleteRoutetag(Routetag instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertRecommendation(Recommendation instance);
    partial void UpdateRecommendation(Recommendation instance);
    partial void DeleteRecommendation(Recommendation instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertEventsFriendshipRemoved(EventsFriendshipRemoved instance);
    partial void UpdateEventsFriendshipRemoved(EventsFriendshipRemoved instance);
    partial void DeleteEventsFriendshipRemoved(EventsFriendshipRemoved instance);
    partial void InsertEventsFriendshipEstablished(EventsFriendshipEstablished instance);
    partial void UpdateEventsFriendshipEstablished(EventsFriendshipEstablished instance);
    partial void DeleteEventsFriendshipEstablished(EventsFriendshipEstablished instance);
    partial void InsertEventsRouteCreated(EventsRouteCreated instance);
    partial void UpdateEventsRouteCreated(EventsRouteCreated instance);
    partial void DeleteEventsRouteCreated(EventsRouteCreated instance);
    partial void InsertEventsRouteFavored(EventsRouteFavored instance);
    partial void UpdateEventsRouteFavored(EventsRouteFavored instance);
    partial void DeleteEventsRouteFavored(EventsRouteFavored instance);
    #endregion
		
		public CykelnetDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CykelnetConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CykelnetDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CykelnetDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CykelnetDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CykelnetDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FriendRequest> FriendRequests
		{
			get
			{
				return this.GetTable<FriendRequest>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Favorite> Favorites
		{
			get
			{
				return this.GetTable<Favorite>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Routetag> Routetags
		{
			get
			{
				return this.GetTable<Routetag>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Recommendation> Recommendations
		{
			get
			{
				return this.GetTable<Recommendation>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<EventsFriendshipRemoved> EventsFriendshipRemoveds
		{
			get
			{
				return this.GetTable<EventsFriendshipRemoved>();
			}
		}
		
		public System.Data.Linq.Table<EventsFriendshipEstablished> EventsFriendshipEstablisheds
		{
			get
			{
				return this.GetTable<EventsFriendshipEstablished>();
			}
		}
		
		public System.Data.Linq.Table<EventsRouteCreated> EventsRouteCreateds
		{
			get
			{
				return this.GetTable<EventsRouteCreated>();
			}
		}
		
		public System.Data.Linq.Table<EventsRouteFavored> EventsRouteFavoreds
		{
			get
			{
				return this.GetTable<EventsRouteFavored>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendRequest")]
	public partial class FriendRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private System.Guid _FromUser;
		
		private System.Guid _ToUser;
		
		private System.DateTime _RequestTime;
		
		private System.Nullable<bool> _Accepted;
		
		private System.Nullable<System.DateTime> _AcceptedTime;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnFromUserChanging(System.Guid value);
    partial void OnFromUserChanged();
    partial void OnToUserChanging(System.Guid value);
    partial void OnToUserChanged();
    partial void OnRequestTimeChanging(System.DateTime value);
    partial void OnRequestTimeChanged();
    partial void OnAcceptedChanging(System.Nullable<bool> value);
    partial void OnAcceptedChanged();
    partial void OnAcceptedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedTimeChanged();
    #endregion
		
		public FriendRequest()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUser", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if ((this._FromUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUser", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ToUser
		{
			get
			{
				return this._ToUser;
			}
			set
			{
				if ((this._ToUser != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserChanging(value);
					this.SendPropertyChanging();
					this._ToUser = value;
					this.SendPropertyChanged("ToUser");
					this.OnToUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestTime", DbType="DateTime NOT NULL")]
		public System.DateTime RequestTime
		{
			get
			{
				return this._RequestTime;
			}
			set
			{
				if ((this._RequestTime != value))
				{
					this.OnRequestTimeChanging(value);
					this.SendPropertyChanging();
					this._RequestTime = value;
					this.SendPropertyChanged("RequestTime");
					this.OnRequestTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit")]
		public System.Nullable<bool> Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedTime
		{
			get
			{
				return this._AcceptedTime;
			}
			set
			{
				if ((this._AcceptedTime != value))
				{
					this.OnAcceptedTimeChanging(value);
					this.SendPropertyChanging();
					this._AcceptedTime = value;
					this.SendPropertyChanged("AcceptedTime");
					this.OnAcceptedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FriendRequest", Storage="_User", ThisKey="FromUser", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FriendRequests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FriendRequests.Add(this);
						this._FromUser = value.UserID;
					}
					else
					{
						this._FromUser = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FriendRequest1", Storage="_User1", ThisKey="ToUser", OtherKey="UserID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.FriendRequests1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.FriendRequests1.Add(this);
						this._ToUser = value.UserID;
					}
					else
					{
						this._ToUser = default(System.Guid);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FriendRelationID;
		
		private System.Guid _User1;
		
		private System.Guid _User2;
		
		private System.DateTime _FriendsSince;
		
		private System.Nullable<System.DateTime> _FriendsTil;
		
		private EntitySet<EventsFriendshipRemoved> _EventsFriendshipRemoveds;
		
		private EntitySet<EventsFriendshipEstablished> _EventsFriendshipEstablisheds;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriendRelationIDChanging(int value);
    partial void OnFriendRelationIDChanged();
    partial void OnUser1Changing(System.Guid value);
    partial void OnUser1Changed();
    partial void OnUser2Changing(System.Guid value);
    partial void OnUser2Changed();
    partial void OnFriendsSinceChanging(System.DateTime value);
    partial void OnFriendsSinceChanged();
    partial void OnFriendsTilChanging(System.Nullable<System.DateTime> value);
    partial void OnFriendsTilChanged();
    #endregion
		
		public Friend()
		{
			this._EventsFriendshipRemoveds = new EntitySet<EventsFriendshipRemoved>(new Action<EventsFriendshipRemoved>(this.attach_EventsFriendshipRemoveds), new Action<EventsFriendshipRemoved>(this.detach_EventsFriendshipRemoveds));
			this._EventsFriendshipEstablisheds = new EntitySet<EventsFriendshipEstablished>(new Action<EventsFriendshipEstablished>(this.attach_EventsFriendshipEstablisheds), new Action<EventsFriendshipEstablished>(this.detach_EventsFriendshipEstablisheds));
			this._User = default(EntityRef<User>);
			this._User3 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendRelationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FriendRelationID
		{
			get
			{
				return this._FriendRelationID;
			}
			set
			{
				if ((this._FriendRelationID != value))
				{
					this.OnFriendRelationIDChanging(value);
					this.SendPropertyChanging();
					this._FriendRelationID = value;
					this.SendPropertyChanged("FriendRelationID");
					this.OnFriendRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User1
		{
			get
			{
				return this._User1;
			}
			set
			{
				if ((this._User1 != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser1Changing(value);
					this.SendPropertyChanging();
					this._User1 = value;
					this.SendPropertyChanged("User1");
					this.OnUser1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User2
		{
			get
			{
				return this._User2;
			}
			set
			{
				if ((this._User2 != value))
				{
					if (this._User3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser2Changing(value);
					this.SendPropertyChanging();
					this._User2 = value;
					this.SendPropertyChanged("User2");
					this.OnUser2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendsSince", DbType="DateTime NOT NULL")]
		public System.DateTime FriendsSince
		{
			get
			{
				return this._FriendsSince;
			}
			set
			{
				if ((this._FriendsSince != value))
				{
					this.OnFriendsSinceChanging(value);
					this.SendPropertyChanging();
					this._FriendsSince = value;
					this.SendPropertyChanged("FriendsSince");
					this.OnFriendsSinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendsTil", DbType="DateTime")]
		public System.Nullable<System.DateTime> FriendsTil
		{
			get
			{
				return this._FriendsTil;
			}
			set
			{
				if ((this._FriendsTil != value))
				{
					this.OnFriendsTilChanging(value);
					this.SendPropertyChanging();
					this._FriendsTil = value;
					this.SendPropertyChanged("FriendsTil");
					this.OnFriendsTilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Friend_EventsFriendshipRemoved", Storage="_EventsFriendshipRemoveds", ThisKey="FriendRelationID", OtherKey="FriendRelationID")]
		public EntitySet<EventsFriendshipRemoved> EventsFriendshipRemoveds
		{
			get
			{
				return this._EventsFriendshipRemoveds;
			}
			set
			{
				this._EventsFriendshipRemoveds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Friend_EventsFriendshipEstablished", Storage="_EventsFriendshipEstablisheds", ThisKey="FriendRelationID", OtherKey="FriendRelationID")]
		public EntitySet<EventsFriendshipEstablished> EventsFriendshipEstablisheds
		{
			get
			{
				return this._EventsFriendshipEstablisheds;
			}
			set
			{
				this._EventsFriendshipEstablisheds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_User", ThisKey="User1", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._User1 = value.UserID;
					}
					else
					{
						this._User1 = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_User3", ThisKey="User2", OtherKey="UserID", IsForeignKey=true)]
		public User User3
		{
			get
			{
				return this._User3.Entity;
			}
			set
			{
				User previousValue = this._User3.Entity;
				if (((previousValue != value) 
							|| (this._User3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User3.Entity = null;
						previousValue.Friends1.Remove(this);
					}
					this._User3.Entity = value;
					if ((value != null))
					{
						value.Friends1.Add(this);
						this._User2 = value.UserID;
					}
					else
					{
						this._User2 = default(System.Guid);
					}
					this.SendPropertyChanged("User3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventsFriendshipRemoveds(EventsFriendshipRemoved entity)
		{
			this.SendPropertyChanging();
			entity.Friend = this;
		}
		
		private void detach_EventsFriendshipRemoveds(EventsFriendshipRemoved entity)
		{
			this.SendPropertyChanging();
			entity.Friend = null;
		}
		
		private void attach_EventsFriendshipEstablisheds(EventsFriendshipEstablished entity)
		{
			this.SendPropertyChanging();
			entity.Friend = this;
		}
		
		private void detach_EventsFriendshipEstablisheds(EventsFriendshipEstablished entity)
		{
			this.SendPropertyChanging();
			entity.Friend = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favorites")]
	public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Favorite_ID;
		
		private System.Guid _User_ID;
		
		private int _Route_ID;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavorite_IDChanging(int value);
    partial void OnFavorite_IDChanged();
    partial void OnUser_IDChanging(System.Guid value);
    partial void OnUser_IDChanged();
    partial void OnRoute_IDChanging(int value);
    partial void OnRoute_IDChanged();
    #endregion
		
		public Favorite()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Favorite_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Favorite_ID
		{
			get
			{
				return this._Favorite_ID;
			}
			set
			{
				if ((this._Favorite_ID != value))
				{
					this.OnFavorite_IDChanging(value);
					this.SendPropertyChanging();
					this._Favorite_ID = value;
					this.SendPropertyChanged("Favorite_ID");
					this.OnFavorite_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_ID", DbType="Int NOT NULL")]
		public int Route_ID
		{
			get
			{
				return this._Route_ID;
			}
			set
			{
				if ((this._Route_ID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IDChanging(value);
					this.SendPropertyChanging();
					this._Route_ID = value;
					this.SendPropertyChanged("Route_ID");
					this.OnRoute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Favorite", Storage="_Route", ThisKey="Route_ID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._Route_ID = value.RouteID;
					}
					else
					{
						this._Route_ID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_User", ThisKey="User_ID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._User_ID = value.UserID;
					}
					else
					{
						this._User_ID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ratings")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Rate_ID;
		
		private System.Guid _User_ID;
		
		private int _Route_ID;
		
		private bool _Rate;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRate_IDChanging(int value);
    partial void OnRate_IDChanged();
    partial void OnUser_IDChanging(System.Guid value);
    partial void OnUser_IDChanged();
    partial void OnRoute_IDChanging(int value);
    partial void OnRoute_IDChanged();
    partial void OnRateChanging(bool value);
    partial void OnRateChanged();
    #endregion
		
		public Rating()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Rate_ID
		{
			get
			{
				return this._Rate_ID;
			}
			set
			{
				if ((this._Rate_ID != value))
				{
					this.OnRate_IDChanging(value);
					this.SendPropertyChanging();
					this._Rate_ID = value;
					this.SendPropertyChanged("Rate_ID");
					this.OnRate_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_ID", DbType="Int NOT NULL")]
		public int Route_ID
		{
			get
			{
				return this._Route_ID;
			}
			set
			{
				if ((this._Route_ID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IDChanging(value);
					this.SendPropertyChanging();
					this._Route_ID = value;
					this.SendPropertyChanged("Route_ID");
					this.OnRoute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Bit NOT NULL")]
		public bool Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Rating", Storage="_Route", ThisKey="Route_ID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._Route_ID = value.RouteID;
					}
					else
					{
						this._Route_ID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_User", ThisKey="User_ID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._User_ID = value.UserID;
					}
					else
					{
						this._User_ID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TagName;
		
		private int _Tag_ID;
		
		private EntitySet<Routetag> _Routetags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTag_IDChanging(int value);
    partial void OnTag_IDChanged();
    #endregion
		
		public Tag()
		{
			this._Routetags = new EntitySet<Routetag>(new Action<Routetag>(this.attach_Routetags), new Action<Routetag>(this.detach_Routetags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag_ID", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Tag_ID
		{
			get
			{
				return this._Tag_ID;
			}
			set
			{
				if ((this._Tag_ID != value))
				{
					this.OnTag_IDChanging(value);
					this.SendPropertyChanging();
					this._Tag_ID = value;
					this.SendPropertyChanged("Tag_ID");
					this.OnTag_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Routetag", Storage="_Routetags", ThisKey="Tag_ID", OtherKey="Tag_ID")]
		public EntitySet<Routetag> Routetags
		{
			get
			{
				return this._Routetags;
			}
			set
			{
				this._Routetags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routetags(Routetag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Routetags(Routetag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Routetags")]
	public partial class Routetag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Tag_ID;
		
		private int _Route_ID;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTag_IDChanging(int value);
    partial void OnTag_IDChanged();
    partial void OnRoute_IDChanging(int value);
    partial void OnRoute_IDChanged();
    #endregion
		
		public Routetag()
		{
			this._Tag = default(EntityRef<Tag>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Tag_ID
		{
			get
			{
				return this._Tag_ID;
			}
			set
			{
				if ((this._Tag_ID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTag_IDChanging(value);
					this.SendPropertyChanging();
					this._Tag_ID = value;
					this.SendPropertyChanged("Tag_ID");
					this.OnTag_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Route_ID
		{
			get
			{
				return this._Route_ID;
			}
			set
			{
				if ((this._Route_ID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IDChanging(value);
					this.SendPropertyChanging();
					this._Route_ID = value;
					this.SendPropertyChanged("Route_ID");
					this.OnRoute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Routetag", Storage="_Tag", ThisKey="Tag_ID", OtherKey="Tag_ID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Routetags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Routetags.Add(this);
						this._Tag_ID = value.Tag_ID;
					}
					else
					{
						this._Tag_ID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Routetag", Storage="_Route", ThisKey="Route_ID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Routetags.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Routetags.Add(this);
						this._Route_ID = value.RouteID;
					}
					else
					{
						this._Route_ID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Routes")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteID;
		
		private System.Guid _User_ID;
		
		private string _Name;
		
		private string _City;
		
		private int _Heightmeters;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<Routetag> _Routetags;
		
		private EntitySet<Recommendation> _Recommendations;
		
		private EntitySet<EventsRouteCreated> _EventsRouteCreateds;
		
		private EntitySet<EventsRouteFavored> _EventsRouteFavoreds;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnUser_IDChanging(System.Guid value);
    partial void OnUser_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnHeightmetersChanging(int value);
    partial void OnHeightmetersChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToChanged();
    #endregion
		
		public Route()
		{
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Routetags = new EntitySet<Routetag>(new Action<Routetag>(this.attach_Routetags), new Action<Routetag>(this.detach_Routetags));
			this._Recommendations = new EntitySet<Recommendation>(new Action<Recommendation>(this.attach_Recommendations), new Action<Recommendation>(this.detach_Recommendations));
			this._EventsRouteCreateds = new EntitySet<EventsRouteCreated>(new Action<EventsRouteCreated>(this.attach_EventsRouteCreateds), new Action<EventsRouteCreated>(this.detach_EventsRouteCreateds));
			this._EventsRouteFavoreds = new EntitySet<EventsRouteFavored>(new Action<EventsRouteFavored>(this.attach_EventsRouteFavoreds), new Action<EventsRouteFavored>(this.detach_EventsRouteFavoreds));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Heightmeters", DbType="Int NOT NULL")]
		public int Heightmeters
		{
			get
			{
				return this._Heightmeters;
			}
			set
			{
				if ((this._Heightmeters != value))
				{
					this.OnHeightmetersChanging(value);
					this.SendPropertyChanging();
					this._Heightmeters = value;
					this.SendPropertyChanged("Heightmeters");
					this.OnHeightmetersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Favorite", Storage="_Favorites", ThisKey="RouteID", OtherKey="Route_ID")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Rating", Storage="_Ratings", ThisKey="RouteID", OtherKey="Route_ID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Routetag", Storage="_Routetags", ThisKey="RouteID", OtherKey="Route_ID")]
		public EntitySet<Routetag> Routetags
		{
			get
			{
				return this._Routetags;
			}
			set
			{
				this._Routetags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Recommendation", Storage="_Recommendations", ThisKey="RouteID", OtherKey="Route_ID")]
		public EntitySet<Recommendation> Recommendations
		{
			get
			{
				return this._Recommendations;
			}
			set
			{
				this._Recommendations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_EventsRouteCreated", Storage="_EventsRouteCreateds", ThisKey="RouteID", OtherKey="EventRouteID")]
		public EntitySet<EventsRouteCreated> EventsRouteCreateds
		{
			get
			{
				return this._EventsRouteCreateds;
			}
			set
			{
				this._EventsRouteCreateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_EventsRouteFavored", Storage="_EventsRouteFavoreds", ThisKey="RouteID", OtherKey="EventRouteID")]
		public EntitySet<EventsRouteFavored> EventsRouteFavoreds
		{
			get
			{
				return this._EventsRouteFavoreds;
			}
			set
			{
				this._EventsRouteFavoreds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Route", Storage="_User", ThisKey="User_ID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._User_ID = value.UserID;
					}
					else
					{
						this._User_ID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Routetags(Routetag entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Routetags(Routetag entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Recommendations(Recommendation entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Recommendations(Recommendation entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_EventsRouteCreateds(EventsRouteCreated entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_EventsRouteCreateds(EventsRouteCreated entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_EventsRouteFavoreds(EventsRouteFavored entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_EventsRouteFavoreds(EventsRouteFavored entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recommendations")]
	public partial class Recommendation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _User_ID;
		
		private int _Route_ID;
		
		private int _Confidence;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(System.Guid value);
    partial void OnUser_IDChanged();
    partial void OnRoute_IDChanging(int value);
    partial void OnRoute_IDChanged();
    partial void OnConfidenceChanging(int value);
    partial void OnConfidenceChanged();
    #endregion
		
		public Recommendation()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Route_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Route_ID
		{
			get
			{
				return this._Route_ID;
			}
			set
			{
				if ((this._Route_ID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoute_IDChanging(value);
					this.SendPropertyChanging();
					this._Route_ID = value;
					this.SendPropertyChanged("Route_ID");
					this.OnRoute_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confidence", DbType="Int NOT NULL")]
		public int Confidence
		{
			get
			{
				return this._Confidence;
			}
			set
			{
				if ((this._Confidence != value))
				{
					this.OnConfidenceChanging(value);
					this.SendPropertyChanging();
					this._Confidence = value;
					this.SendPropertyChanged("Confidence");
					this.OnConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Recommendation", Storage="_Route", ThisKey="Route_ID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Recommendations.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Recommendations.Add(this);
						this._Route_ID = value.RouteID;
					}
					else
					{
						this._Route_ID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recommendation", Storage="_User", ThisKey="User_ID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Recommendations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Recommendations.Add(this);
						this._User_ID = value.UserID;
					}
					else
					{
						this._User_ID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _UserPassword;
		
		private string _UserEmail;
		
		private string _ApplicationName;
		
		private string _UserCyclistType;
		
		private string _UserFullName;
		
		private string _UserAddress1;
		
		private string _UserAddress2;
		
		private string _UserCountry;
		
		private System.Nullable<System.DateTime> _UserBirthday;
		
		private System.Nullable<System.DateTime> _UserDeleteDate;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.DateTime _LastActivityDate;
		
		private System.DateTime _CreationDate;
		
		private EntitySet<FriendRequest> _FriendRequests;
		
		private EntitySet<FriendRequest> _FriendRequests1;
		
		private EntitySet<Friend> _Friends;
		
		private EntitySet<Friend> _Friends1;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<Recommendation> _Recommendations;
		
		private EntitySet<EventsRouteCreated> _EventsRouteCreateds;
		
		private EntitySet<EventsRouteFavored> _EventsRouteFavoreds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(System.Data.Linq.Binary value);
    partial void OnUserPasswordChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnUserCyclistTypeChanging(string value);
    partial void OnUserCyclistTypeChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnUserAddress1Changing(string value);
    partial void OnUserAddress1Changed();
    partial void OnUserAddress2Changing(string value);
    partial void OnUserAddress2Changed();
    partial void OnUserCountryChanging(string value);
    partial void OnUserCountryChanged();
    partial void OnUserBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnUserBirthdayChanged();
    partial void OnUserDeleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUserDeleteDateChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public User()
		{
			this._FriendRequests = new EntitySet<FriendRequest>(new Action<FriendRequest>(this.attach_FriendRequests), new Action<FriendRequest>(this.detach_FriendRequests));
			this._FriendRequests1 = new EntitySet<FriendRequest>(new Action<FriendRequest>(this.attach_FriendRequests1), new Action<FriendRequest>(this.detach_FriendRequests1));
			this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));
			this._Friends1 = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends1), new Action<Friend>(this.detach_Friends1));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Recommendations = new EntitySet<Recommendation>(new Action<Recommendation>(this.attach_Recommendations), new Action<Recommendation>(this.detach_Recommendations));
			this._EventsRouteCreateds = new EntitySet<EventsRouteCreated>(new Action<EventsRouteCreated>(this.attach_EventsRouteCreateds), new Action<EventsRouteCreated>(this.detach_EventsRouteCreateds));
			this._EventsRouteFavoreds = new EntitySet<EventsRouteFavored>(new Action<EventsRouteFavored>(this.attach_EventsRouteFavoreds), new Action<EventsRouteFavored>(this.detach_EventsRouteFavoreds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="Binary(64)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(256)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="VarChar(MAX)")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCyclistType", DbType="VarChar(MAX)")]
		public string UserCyclistType
		{
			get
			{
				return this._UserCyclistType;
			}
			set
			{
				if ((this._UserCyclistType != value))
				{
					this.OnUserCyclistTypeChanging(value);
					this.SendPropertyChanging();
					this._UserCyclistType = value;
					this.SendPropertyChanged("UserCyclistType");
					this.OnUserCyclistTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="VarChar(MAX)")]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress1", DbType="VarChar(MAX)")]
		public string UserAddress1
		{
			get
			{
				return this._UserAddress1;
			}
			set
			{
				if ((this._UserAddress1 != value))
				{
					this.OnUserAddress1Changing(value);
					this.SendPropertyChanging();
					this._UserAddress1 = value;
					this.SendPropertyChanged("UserAddress1");
					this.OnUserAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress2", DbType="VarChar(MAX)")]
		public string UserAddress2
		{
			get
			{
				return this._UserAddress2;
			}
			set
			{
				if ((this._UserAddress2 != value))
				{
					this.OnUserAddress2Changing(value);
					this.SendPropertyChanging();
					this._UserAddress2 = value;
					this.SendPropertyChanged("UserAddress2");
					this.OnUserAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCountry", DbType="VarChar(MAX)")]
		public string UserCountry
		{
			get
			{
				return this._UserCountry;
			}
			set
			{
				if ((this._UserCountry != value))
				{
					this.OnUserCountryChanging(value);
					this.SendPropertyChanging();
					this._UserCountry = value;
					this.SendPropertyChanged("UserCountry");
					this.OnUserCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBirthday", DbType="Date")]
		public System.Nullable<System.DateTime> UserBirthday
		{
			get
			{
				return this._UserBirthday;
			}
			set
			{
				if ((this._UserBirthday != value))
				{
					this.OnUserBirthdayChanging(value);
					this.SendPropertyChanging();
					this._UserBirthday = value;
					this.SendPropertyChanged("UserBirthday");
					this.OnUserBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDeleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UserDeleteDate
		{
			get
			{
				return this._UserDeleteDate;
			}
			set
			{
				if ((this._UserDeleteDate != value))
				{
					this.OnUserDeleteDateChanging(value);
					this.SendPropertyChanging();
					this._UserDeleteDate = value;
					this.SendPropertyChanged("UserDeleteDate");
					this.OnUserDeleteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FriendRequest", Storage="_FriendRequests", ThisKey="UserID", OtherKey="FromUser")]
		public EntitySet<FriendRequest> FriendRequests
		{
			get
			{
				return this._FriendRequests;
			}
			set
			{
				this._FriendRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_FriendRequest1", Storage="_FriendRequests1", ThisKey="UserID", OtherKey="ToUser")]
		public EntitySet<FriendRequest> FriendRequests1
		{
			get
			{
				return this._FriendRequests1;
			}
			set
			{
				this._FriendRequests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend", Storage="_Friends", ThisKey="UserID", OtherKey="User1")]
		public EntitySet<Friend> Friends
		{
			get
			{
				return this._Friends;
			}
			set
			{
				this._Friends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friend1", Storage="_Friends1", ThisKey="UserID", OtherKey="User2")]
		public EntitySet<Friend> Friends1
		{
			get
			{
				return this._Friends1;
			}
			set
			{
				this._Friends1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_Favorites", ThisKey="UserID", OtherKey="User_ID")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_Ratings", ThisKey="UserID", OtherKey="User_ID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Route", Storage="_Routes", ThisKey="UserID", OtherKey="User_ID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Recommendation", Storage="_Recommendations", ThisKey="UserID", OtherKey="User_ID")]
		public EntitySet<Recommendation> Recommendations
		{
			get
			{
				return this._Recommendations;
			}
			set
			{
				this._Recommendations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventsRouteCreated", Storage="_EventsRouteCreateds", ThisKey="UserID", OtherKey="EventCreator")]
		public EntitySet<EventsRouteCreated> EventsRouteCreateds
		{
			get
			{
				return this._EventsRouteCreateds;
			}
			set
			{
				this._EventsRouteCreateds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventsRouteFavored", Storage="_EventsRouteFavoreds", ThisKey="UserID", OtherKey="EventCreator")]
		public EntitySet<EventsRouteFavored> EventsRouteFavoreds
		{
			get
			{
				return this._EventsRouteFavoreds;
			}
			set
			{
				this._EventsRouteFavoreds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FriendRequests(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FriendRequests1(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_FriendRequests1(FriendRequest entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User3 = this;
		}
		
		private void detach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.User3 = null;
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Recommendations(Recommendation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Recommendations(Recommendation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventsRouteCreateds(EventsRouteCreated entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventsRouteCreateds(EventsRouteCreated entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventsRouteFavoreds(EventsRouteFavored entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventsRouteFavoreds(EventsRouteFavored entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsFriendshipRemoved")]
	public partial class EventsFriendshipRemoved : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _FriendRelationID;
		
		private System.Guid _User1;
		
		private System.Guid _User2;
		
		private System.DateTime _EventTime;
		
		private EntityRef<Friend> _Friend;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnFriendRelationIDChanging(int value);
    partial void OnFriendRelationIDChanged();
    partial void OnUser1Changing(System.Guid value);
    partial void OnUser1Changed();
    partial void OnUser2Changing(System.Guid value);
    partial void OnUser2Changed();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    #endregion
		
		public EventsFriendshipRemoved()
		{
			this._Friend = default(EntityRef<Friend>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendRelationID", DbType="Int NOT NULL")]
		public int FriendRelationID
		{
			get
			{
				return this._FriendRelationID;
			}
			set
			{
				if ((this._FriendRelationID != value))
				{
					if (this._Friend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendRelationIDChanging(value);
					this.SendPropertyChanging();
					this._FriendRelationID = value;
					this.SendPropertyChanged("FriendRelationID");
					this.OnFriendRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User1
		{
			get
			{
				return this._User1;
			}
			set
			{
				if ((this._User1 != value))
				{
					this.OnUser1Changing(value);
					this.SendPropertyChanging();
					this._User1 = value;
					this.SendPropertyChanged("User1");
					this.OnUser1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User2
		{
			get
			{
				return this._User2;
			}
			set
			{
				if ((this._User2 != value))
				{
					this.OnUser2Changing(value);
					this.SendPropertyChanging();
					this._User2 = value;
					this.SendPropertyChanged("User2");
					this.OnUser2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Friend_EventsFriendshipRemoved", Storage="_Friend", ThisKey="FriendRelationID", OtherKey="FriendRelationID", IsForeignKey=true)]
		public Friend Friend
		{
			get
			{
				return this._Friend.Entity;
			}
			set
			{
				Friend previousValue = this._Friend.Entity;
				if (((previousValue != value) 
							|| (this._Friend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Friend.Entity = null;
						previousValue.EventsFriendshipRemoveds.Remove(this);
					}
					this._Friend.Entity = value;
					if ((value != null))
					{
						value.EventsFriendshipRemoveds.Add(this);
						this._FriendRelationID = value.FriendRelationID;
					}
					else
					{
						this._FriendRelationID = default(int);
					}
					this.SendPropertyChanged("Friend");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsFriendshipEstablished")]
	public partial class EventsFriendshipEstablished : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _FriendRelationID;
		
		private System.Guid _User1;
		
		private System.Guid _User2;
		
		private System.DateTime _EventTime;
		
		private EntityRef<Friend> _Friend;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnFriendRelationIDChanging(int value);
    partial void OnFriendRelationIDChanged();
    partial void OnUser1Changing(System.Guid value);
    partial void OnUser1Changed();
    partial void OnUser2Changing(System.Guid value);
    partial void OnUser2Changed();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    #endregion
		
		public EventsFriendshipEstablished()
		{
			this._Friend = default(EntityRef<Friend>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendRelationID", DbType="Int NOT NULL")]
		public int FriendRelationID
		{
			get
			{
				return this._FriendRelationID;
			}
			set
			{
				if ((this._FriendRelationID != value))
				{
					if (this._Friend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriendRelationIDChanging(value);
					this.SendPropertyChanging();
					this._FriendRelationID = value;
					this.SendPropertyChanged("FriendRelationID");
					this.OnFriendRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User1
		{
			get
			{
				return this._User1;
			}
			set
			{
				if ((this._User1 != value))
				{
					this.OnUser1Changing(value);
					this.SendPropertyChanging();
					this._User1 = value;
					this.SendPropertyChanged("User1");
					this.OnUser1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid User2
		{
			get
			{
				return this._User2;
			}
			set
			{
				if ((this._User2 != value))
				{
					this.OnUser2Changing(value);
					this.SendPropertyChanging();
					this._User2 = value;
					this.SendPropertyChanged("User2");
					this.OnUser2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Friend_EventsFriendshipEstablished", Storage="_Friend", ThisKey="FriendRelationID", OtherKey="FriendRelationID", IsForeignKey=true)]
		public Friend Friend
		{
			get
			{
				return this._Friend.Entity;
			}
			set
			{
				Friend previousValue = this._Friend.Entity;
				if (((previousValue != value) 
							|| (this._Friend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Friend.Entity = null;
						previousValue.EventsFriendshipEstablisheds.Remove(this);
					}
					this._Friend.Entity = value;
					if ((value != null))
					{
						value.EventsFriendshipEstablisheds.Add(this);
						this._FriendRelationID = value.FriendRelationID;
					}
					else
					{
						this._FriendRelationID = default(int);
					}
					this.SendPropertyChanged("Friend");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsRouteCreated")]
	public partial class EventsRouteCreated : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _EventRouteID;
		
		private System.Guid _EventCreator;
		
		private System.DateTime _EventTime;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventRouteIDChanging(int value);
    partial void OnEventRouteIDChanged();
    partial void OnEventCreatorChanging(System.Guid value);
    partial void OnEventCreatorChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    #endregion
		
		public EventsRouteCreated()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventRouteID", DbType="Int NOT NULL")]
		public int EventRouteID
		{
			get
			{
				return this._EventRouteID;
			}
			set
			{
				if ((this._EventRouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventRouteIDChanging(value);
					this.SendPropertyChanging();
					this._EventRouteID = value;
					this.SendPropertyChanged("EventRouteID");
					this.OnEventRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCreator", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EventCreator
		{
			get
			{
				return this._EventCreator;
			}
			set
			{
				if ((this._EventCreator != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventCreatorChanging(value);
					this.SendPropertyChanging();
					this._EventCreator = value;
					this.SendPropertyChanged("EventCreator");
					this.OnEventCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_EventsRouteCreated", Storage="_Route", ThisKey="EventRouteID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.EventsRouteCreateds.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.EventsRouteCreateds.Add(this);
						this._EventRouteID = value.RouteID;
					}
					else
					{
						this._EventRouteID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventsRouteCreated", Storage="_User", ThisKey="EventCreator", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventsRouteCreateds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventsRouteCreateds.Add(this);
						this._EventCreator = value.UserID;
					}
					else
					{
						this._EventCreator = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventsRouteFavored")]
	public partial class EventsRouteFavored : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private int _EventRouteID;
		
		private System.Guid _EventCreator;
		
		private System.DateTime _EventTime;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventRouteIDChanging(int value);
    partial void OnEventRouteIDChanged();
    partial void OnEventCreatorChanging(System.Guid value);
    partial void OnEventCreatorChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    #endregion
		
		public EventsRouteFavored()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventRouteID", DbType="Int NOT NULL")]
		public int EventRouteID
		{
			get
			{
				return this._EventRouteID;
			}
			set
			{
				if ((this._EventRouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventRouteIDChanging(value);
					this.SendPropertyChanging();
					this._EventRouteID = value;
					this.SendPropertyChanged("EventRouteID");
					this.OnEventRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCreator", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EventCreator
		{
			get
			{
				return this._EventCreator;
			}
			set
			{
				if ((this._EventCreator != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventCreatorChanging(value);
					this.SendPropertyChanging();
					this._EventCreator = value;
					this.SendPropertyChanged("EventCreator");
					this.OnEventCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_EventsRouteFavored", Storage="_Route", ThisKey="EventRouteID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.EventsRouteFavoreds.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.EventsRouteFavoreds.Add(this);
						this._EventRouteID = value.RouteID;
					}
					else
					{
						this._EventRouteID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventsRouteFavored", Storage="_User", ThisKey="EventCreator", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventsRouteFavoreds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventsRouteFavoreds.Add(this);
						this._EventCreator = value.UserID;
					}
					else
					{
						this._EventCreator = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
